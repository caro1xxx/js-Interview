执行上下文:
当js引擎解析到可执行代码片段(通常是函数调用阶段)的时候,就会做一些准备工作,这个准备工作就是"执行上下文",
或者叫做执行环境

ES3执行上下文的类型:
全局执行上下文:
        这是默认或者说最基础的执行上下文,一个程序中只会存在一个上下文,它在整个js脚本的生命周期内都会存于执行堆栈的最底部不会被栈
        弹出小文,全局山下文会生成一个全局对象,(如window)并且将this值绑定到全局对象上
函数执行上下文:
        每当一个函数被调用时,都会创建一个新的函数执行上下文,不管这个函数是否被重复调用.
Eval函数执行上下文:
        执行在eval函数内部的代码也会有它自己的执行上下文(eval函数在ES5中会更改词法作用域)

ES3中执行上下文的生命周期:
创建阶段
执行阶段
销毁阶段

创建阶段:
        1. 函数执行上下文的创建阶段,会发生在函数调用时且在执行函数体内的具体代码之前
          用当前函数的参数列表创建一个变量对象并且将在当前执行上下文与之关联,函数代码块中声明的变量或者函数将作为属性添加到变
          量对象上.在这一阶段函数和变量的初始化声明,变量统一定义为undefined等到赋值时才有确值,而函数则会直接定义.
          (最后一句话的操作就是"变量提升"变量和函数声明都会提升,但是函数提升更靠前)
        2. 确定this的值
执行阶段:
        js代码开始逐条执行,在这个阶段,js引擎对定义的变量赋值,开始顺着作用域链访问变量,如果内部有函数调用就创建一个新的执行上下文压入
        执行栈并把控制权交出
销毁阶段:
        一般来讲函数执行完成后,当前执行上下文会被弹出执行上下文栈并且销毁,控制权重新交给执行栈上一层的执行上下文
        注意这是一般情况,闭包的情况有所不同
