// var：
// 具有变量提升
// 能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明
// 在函数中使用使用var声明变量时候，该变量是局部的

// 在ES5中，顶层对象的属性和全局变量是等价的，用var声明的变量既是全局变量，也是顶层变量
// 列子
var a = 10;
window.a // 10


// let：
// 不存在变量提升
// 使用let声明变量前，该变量都不可用，也就是大家常说的“暂时性死区”(TDZ)
// let不允许在相同作用域中重复声明
// 如果在不同块内声明同一个变量是不会报错的
let a = 20
{
    let a = 30
}
// 所声明的变量，只在let命令所在的代码块内有效
{
    let a = 10;
}
window.a // ReferenceError


// const：
// 声明一个只读的常量，一旦声明，常量的值就不能改变
const a = 1
a = 3 //TypeError
// const一旦声明变量，就必须立即初始化，不能留到以后赋值
const a; // SyntaxError: Missing initializer in const declaration
// 不能重复声明已被let var声明过的变量


// 注意
// const实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动
// 所以const只能保护原始类型，对引用类型不起作用
// 例子
const a  = {name:'jack'}
a['age'] = 19
a['name'] = 'lucy'


// 区别
// 围绕以下6个点进行展开

// 1.变量提升
// 2.暂时性死区
// 3.块级作用域
// 4.重复声明
// 5.修改声明的变量
// 6.使用