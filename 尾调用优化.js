尾调用:
  function foo() {
    return function bar(){
      console.log(1);
    }
  }
  在编译器执行到foo()时会给foo()开辟一个栈帧,里面又执行到了一个bar函数,又为这个bar函数开辟了一个栈帧
尾调用优化:
  在递归时,很容易造成开辟了大量的栈帧,导致性能下降,尾调用优化就是为了让一个栈帧能够复用,无需再开辟多于的栈帧
  尾调用优化的条件:
    代码处于严格执行
    外部函数的返回值是对尾调用函数的调用
    尾调用函数返回后不需要执行额外的逻辑
    尾调用函数不是引用外部函数作用域中的自由变量闭包