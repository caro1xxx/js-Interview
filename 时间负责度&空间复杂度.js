因为算法的原因，虽然有很多中算法可以得到同一个结果，但是消耗的时间和计算机的空间是不同的

怎么去考量算法之间的优劣就是通过“时间” “空间”的角度：
时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述
空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述

时间复杂度：
    通用表示方法：“大O符号表示法”，即T(n) = O(f(n))
    T(n) = O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度
    例子：
        for(let i=0;i<10;i++)
        {
            i++;
            i+2;
        }
        这个例子中的时间负责度就是O(n),首先我们假设每行代码执行时间是1毫秒，然后第一行代码是1毫秒，第三行是n秒，
        第四行也是n秒，那么就可以得出O(1+2n),这个算法的耗时随着n的变化而变化，从而得出T(n)=O(n)
    
    常见的时间复杂度量级有：
        从上至下复杂度越来越大，越耗时
        常数阶O(1)
        对数阶O(logN)
        线性阶O(n)
        线性对数阶O(nlogN)
        平方阶O(n²)
        立方阶O(n³)
        K次方阶O(n^k)
        指数阶(2^n)

空间复杂度：
    空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，用 S(n) 来定义

    空间复杂度比较常用的有：
        O(1)
        O(n)
        O(n²)